<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-02-15T12:36:32-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Keshav Bansal</title><subtitle>Welcome to my digital space, where I chronicle my adventures in technology and learning.  My goal is to regularly update this site with engaging blog posts, insightful book and paper reviews, and innovative project developments.  I hope that visitors to my website leave with a smile, having gained new knowledge and feeling inspired to explore and create.  Join me on this exciting journey of continuous growth and discovery!
</subtitle><author><name>Keshav Bansal</name><email>keshavbansal015@gmail.com</email></author><entry><title type="html">Annotations in Java</title><link href="http://localhost:4000/java-annotations" rel="alternate" type="text/html" title="Annotations in Java" /><published>2024-02-15T00:00:00-06:00</published><updated>2024-02-15T00:00:00-06:00</updated><id>http://localhost:4000/java-annotations</id><content type="html" xml:base="http://localhost:4000/java-annotations"><![CDATA[<p><img src="/assets/Feb 2024/Java annotations/annotation.gif" alt="Annotate this" class="blog-gif-top" /></p>

<h2 id="what-are-java-annotations-and-how-can-we-customize-them">What are Java annotations and how can we customize them?</h2>

<p>I recently began working on a Spring Boot project where Java annotations are extensively utilized. Realizing my superficial familiarity with annotations, I decided to delve deeper into the subject. This blog aims to enhance my comprehension and to captivate those who are yet to explore the realm of Java annotations. If you’re in the same boat or just curious, stick around. Let’s figure this out. 😊</p>

<h3 id="introduction">Introduction</h3>

<p><strong>Definition:</strong> Metadata that provides information about the program but doesn’t affect its execution.
<strong>Usage:</strong> Compiler instructions, <strong>build-time processing</strong>, <strong>runtime processing</strong>. (This is important!)
<strong>Common annotations:</strong> @Override, @Deprecated, @SuppressWarnings.</p>

<h4 id="hierarchy-of-java-annotations">Hierarchy of Java annotations</h4>
<p><img src="/assets/Feb 2024/Java annotations/JavaAnnotationshierarchy.jpg" alt="Annotate hierarchy" class="blog-gif-top" /></p>

<h3 id="types">Types</h3>
<h4 id="standard-annotations-in-java-se">Standard Annotations in Java SE</h4>

<ul>
  <li>
    <p>@Override: Indicates that a method is intended to override a method declared in a superclass.</p>
  </li>
  <li>
    <p>@Deprecated: Marks a program element (class, method, field, etc.) as no longer recommended for use.</p>
  </li>
  <li>
    <p>@FunctionalInterface: Indicates that the type declaration is intended to be a functional interface, as defined by the Java Language Specification.</p>
  </li>
</ul>

<p><em>And more..</em></p>
<h4 id="meta-annotations-annotations-that-apply-to-other-annotations">Meta-Annotations (Annotations that Apply to Other Annotations)</h4>

<ul>
  <li>
    <p>@Retention: Specifies how long annotations with the annotated type are to be retained.</p>
  </li>
  <li>
    <p>@Documented: Indicates that elements annotated with the annotated type should be documented by javadoc and similar tools by default.</p>
  </li>
  <li>
    <p>@Target: Marks another annotation to restrict the kinds of Java elements to which the annotation can be applied.</p>
  </li>
</ul>

<p><em>And more..</em></p>
<h4 id="annotations-for-special-purposes">Annotations for Special Purposes</h4>

<ul>
  <li>
    <p>Annotations in Java EE: Java EE provides a set of annotations for simplifying enterprise application development, such as <code class="language-plaintext highlighter-rouge">@Entity</code>, <code class="language-plaintext highlighter-rouge">@Stateless</code>, <code class="language-plaintext highlighter-rouge">@WebService</code>, etc., used for ORM, EJBs, and web services, respectively.</p>
  </li>
  <li>
    <p>JUnit Annotations: Used for writing test cases. Common annotations include <code class="language-plaintext highlighter-rouge">@Test</code>, <code class="language-plaintext highlighter-rouge">@Before</code>, <code class="language-plaintext highlighter-rouge">@After</code>, <code class="language-plaintext highlighter-rouge">@BeforeEach</code>, <code class="language-plaintext highlighter-rouge">@AfterEach</code>, <code class="language-plaintext highlighter-rouge">@BeforeClass</code>, <code class="language-plaintext highlighter-rouge">@AfterClass</code>, and <code class="language-plaintext highlighter-rouge">@RunWith</code>.</p>
  </li>
  <li>
    <p>Spring Framework Annotations: Widely used in developing Spring applications, such as <code class="language-plaintext highlighter-rouge">@Component</code>, <code class="language-plaintext highlighter-rouge">@Controller</code>, <code class="language-plaintext highlighter-rouge">@Service</code>, <code class="language-plaintext highlighter-rouge">@Repository</code>, <code class="language-plaintext highlighter-rouge">@Autowired</code>, <code class="language-plaintext highlighter-rouge">@RequestMapping</code>, etc., for component scanning, dependency injection, and request mapping.</p>
  </li>
</ul>

<p><em>And more..</em></p>

<h4 id="custom-annotations">Custom Annotations</h4>
<p>Developers can create their own annotations to express metadata that their application should process. Custom annotations can be designed to provide configuration data, runtime information, or compile-time instructions, among other uses.</p>

<p>Each type of annotation serves a specific purpose, from providing compiler instructions, generating documentation, or offering runtime information for frameworks and applications.</p>
<h3 id="categories">Categories</h3>

<h4 id="marker-annotations">Marker Annotations</h4>

<p>Marker annotations in Java are annotations that do not contain any elements. They are used simply to mark a declaration, providing metadata without any additional configuration.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// CustomMarkerAnnotation file</span>
<span class="kn">package</span> <span class="nn">org.keshavblogs.annotations</span><span class="o">;</span>  
  
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">CustomMarkerAnnotation</span> <span class="o">{</span>  
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Main.java</span>
<span class="kn">package</span> <span class="nn">org.keshavblogs</span><span class="o">;</span>  
  
<span class="kn">import</span> <span class="nn">org.keshavblogs.annotations.CustomMarkerAnnotation</span><span class="o">;</span>  
  
<span class="nd">@CustomMarkerAnnotation</span>  
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>  
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>  
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello world!"</span><span class="o">);</span>  
    <span class="o">}</span>  
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ChildClass</span> <span class="kd">extends</span> <span class="nc">ParentClass</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">someMethod</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// overridden method implementation</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="single-value-annotations">Single-Value Annotations</h4>

<p>Single-value annotations are annotations with only one element. These elements can have default values, simplifying their usage.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">org.keshavblogs.annotations</span><span class="o">;</span>  
  
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">CustomSingleValueAnnotation</span> <span class="o">{</span>  
    <span class="nc">String</span> <span class="nf">value</span><span class="o">()</span> <span class="k">default</span> <span class="s">"My Default Value"</span><span class="o">;</span>  
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Main.java</span>
<span class="kn">package</span> <span class="nn">org.keshavblogs</span><span class="o">;</span>  
  
<span class="kn">import</span> <span class="nn">org.keshavblogs.annotations.CustomSingleValueAnnotation</span><span class="o">;</span>  
  
<span class="nd">@CustomSingleValueAnnotation</span><span class="o">(</span><span class="s">"Updated value"</span><span class="o">)</span>  
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>  
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>  
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello world!"</span><span class="o">);</span>  
    <span class="o">}</span>  
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SuppressWarnings Annotation</span>

<span class="c1">// Class 1</span>
<span class="kd">class</span> <span class="nc">DeprecatedExample</span> <span class="o">{</span>
    <span class="nd">@Deprecated</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">display</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Deprecated example display()"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// Class 2</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SuppressWarningExample</span> <span class="o">{</span>
    <span class="c1">// If we remove the following annotation, the program will generate warnings</span>
    <span class="nd">@SuppressWarnings</span><span class="o">({</span><span class="s">"checked"</span><span class="o">,</span> <span class="s">"deprecation"</span><span class="o">})</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
        <span class="nc">DeprecatedExample</span> <span class="n">d1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DeprecatedExample</span><span class="o">();</span>
        <span class="n">d1</span><span class="o">.</span><span class="na">display</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="full-annotations">Full Annotations</h4>

<p>Full annotations in Java are annotations that have multiple elements, and when you use them, you need to provide values for all the elements. These annotations allow developers to configure and customize their usage in a more detailed manner compared to marker or single-value annotations.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">org.keshavblogs</span><span class="o">;</span>  
  
<span class="kn">import</span> <span class="nn">org.keshavblogs.annotations.CustomFullAnnotation</span><span class="o">;</span>  
  
<span class="nd">@CustomFullAnnotation</span><span class="o">(</span><span class="n">myString</span> <span class="o">=</span> <span class="s">"Updated value"</span><span class="o">,</span> <span class="n">myInt</span> <span class="o">=</span> <span class="mi">5</span><span class="o">)</span>  
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>  
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>  
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello world!"</span><span class="o">);</span>  
    <span class="o">}</span>  
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">org.keshavblogs.annotations</span><span class="o">;</span>  
  
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">CustomFullAnnotation</span> <span class="o">{</span>  
    <span class="nc">String</span> <span class="nf">myString</span><span class="o">()</span> <span class="k">default</span> <span class="s">"My default value"</span><span class="o">;</span>  
    <span class="kt">int</span> <span class="nf">myInt</span><span class="o">()</span> <span class="k">default</span> <span class="mi">1</span><span class="o">;</span>  
<span class="o">}</span>
</code></pre></div></div>

<h4 id="repeatable-annotations">Repeatable Annotations</h4>
<p>Repeatable annotations in Java, introduced in Java 8, allow an annotation to be applied more than once to the same declaration or type use. Before Java 8, an annotation could be used only once on a given element. Repeatable annotations simplify code and make it more readable when multiple occurrences of the same annotation are needed.</p>

<ul>
  <li>Annotations that can be used more than once on the same declaration or type use.</li>
  <li>Introduced in Java 8 to enhance code readability and flexibility.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// CustomRepeatableAnnotationContainer.java</span>
<span class="kn">package</span> <span class="nn">org.keshavblogs.annotations</span><span class="o">;</span>  
  
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">CustomRepeatableAnnotationContainer</span> <span class="o">{</span>  
    <span class="nc">CustomRepeatableAnnotation</span><span class="o">[]</span> <span class="nf">value</span><span class="o">();</span>  
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// CustomRepeatableAnnotation.java</span>
<span class="kn">package</span> <span class="nn">org.keshavblogs.annotations</span><span class="o">;</span>  
  
<span class="kn">import</span> <span class="nn">java.lang.annotation.Repeatable</span><span class="o">;</span>  
  
<span class="nd">@Repeatable</span><span class="o">(</span><span class="nc">CustomRepeatableAnnotationContainer</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>  
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">CustomRepeatableAnnotation</span> <span class="o">{</span>  
    <span class="nc">String</span> <span class="nf">myString</span><span class="o">()</span> <span class="k">default</span> <span class="s">"Default String"</span><span class="o">;</span>  
  
    <span class="kt">int</span> <span class="nf">myInt</span><span class="o">()</span> <span class="k">default</span> <span class="mi">2</span><span class="o">;</span>  
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">org.keshavblogs</span><span class="o">;</span>  
  
<span class="kn">import</span> <span class="nn">org.keshavblogs.annotations.CustomRepeatableAnnotation</span><span class="o">;</span>  
  
<span class="nd">@CustomRepeatableAnnotation</span>  
<span class="nd">@CustomRepeatableAnnotation</span><span class="o">(</span><span class="n">myInt</span> <span class="o">=</span> <span class="mi">10</span><span class="o">,</span> <span class="n">myString</span> <span class="o">=</span> <span class="s">"Updated String"</span><span class="o">)</span>  
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>  
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>  
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello world!"</span><span class="o">);</span>  
    <span class="o">}</span>  
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Have to use @Repeatable annotation to make this work, otherwise we get an error.</li>
</ul>

<h4 id="container-annotation">Container Annotation</h4>
<ul>
  <li>A container annotation in Java is an annotation that holds an array of repeated annotations. Container annotations were introduced along with repeatable annotations in Java 8 to allow an annotation to be applied more than once to the same declaration or type use.</li>
  <li>Container annotations provide a way to group multiple occurrences of the same annotation under a single container.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.lang.annotation.*</span><span class="o">;</span>

<span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="nd">@Target</span><span class="o">({</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">,</span> <span class="nc">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">})</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">RolesAllowedContainer</span> <span class="o">{</span>
    <span class="nc">RolesAllowed</span><span class="o">[]</span> <span class="nf">value</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RolesAllowedContainer</span><span class="o">({</span><span class="nd">@RolesAllowed</span><span class="o">(</span><span class="s">"ADMIN"</span><span class="o">),</span> <span class="nd">@RolesAllowed</span><span class="o">({</span><span class="s">"USER"</span><span class="o">,</span> <span class="s">"MANAGER"</span><span class="o">})})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecureResource</span> <span class="o">{</span>
    <span class="c1">// Class implementation</span>
<span class="o">}</span>
</code></pre></div></div>
<ul>
  <li>Also refer the previous example.</li>
</ul>

<h4 id="type-annotations">Type Annotations</h4>

<p>Type annotations in Java, introduced in Java 8, allow you to apply annotations to types. Types in Java include classes, interfaces, enums, and type parameters. Type annotations provide a more fine-grained way to express metadata about types, enabling developers to specify additional information at the level of types rather than just declarations or elements within the code.</p>

<p>See <a href="https://docs.oracle.com/javase/tutorial/java/annotations/predefined.html">@Target</a></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">org.keshavblogs.support</span><span class="o">;</span>  
  
<span class="kn">import</span> <span class="nn">org.keshavblogs.annotations.IsCustomTypeAnnotation</span><span class="o">;</span>  

<span class="c1">// Generic class with Type annotation  </span>
<span class="kd">public</span> <span class="kd">class</span>  <span class="err">{</span>  
    <span class="nc">public</span> <span class="no">T</span> <span class="nf">work</span><span class="o">()</span> <span class="o">{</span>  
        <span class="c1">// Do something  </span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>  
    <span class="o">}</span>  
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">org.keshavblogs.annotations</span><span class="o">;</span>  

<span class="kn">import</span> <span class="nn">java.lang.annotation.*</span><span class="o">;</span>  
<span class="nd">@Target</span><span class="o">(</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">TYPE_USE</span><span class="o">)</span> <span class="nc">TypeAnnotationExample</span> <span class="o">&lt;</span><span class="nd">@IsCustomTypeAnnotation</span><span class="o">(</span><span class="n">myString</span> <span class="o">=</span> <span class="s">"Parent class"</span><span class="o">,</span> <span class="n">myInt</span> <span class="o">=</span> <span class="mi">2</span><span class="o">)</span> <span class="no">T</span><span class="o">&gt;</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">IsCustomTypeAnnotation</span> <span class="o">{</span>  
    <span class="nc">String</span> <span class="nf">myString</span><span class="o">()</span> <span class="k">default</span> <span class="s">"Custom Type String"</span><span class="o">;</span>  
    <span class="kt">int</span> <span class="nf">myInt</span><span class="o">()</span> <span class="k">default</span> <span class="mi">1</span><span class="o">;</span>  
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Please look up more on this only if you need it.</li>
  <li>Refer this <a href="https://www.geeksforgeeks.org/annotations-in-java/#:~:text=Category%204%3A%20Type%20Annotations%C2%A0">GFG - Annotations in Java</a></li>
</ul>

<h3 id="important-methods">Important Methods</h3>

<ol>
  <li>annotationType() Method
    <ul>
      <li>This method is available in the <code class="language-plaintext highlighter-rouge">Annotation</code> interface.</li>
      <li>It returns the <code class="language-plaintext highlighter-rouge">Class</code> object corresponding to the annotation type.</li>
    </ul>

    <p><strong>Example:</strong></p>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// " ? " meanswe are not sure what it would return. </span>
<span class="c1">// extends Annotation, means, it would definitely extend Annotation class. </span>
<span class="nc">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">Annotation</span><span class="o">&gt;</span> <span class="n">annotationType</span> <span class="o">=</span> <span class="n">myAnnotation</span><span class="o">.</span><span class="na">annotationType</span><span class="o">();</span>
</code></pre></div>    </div>
  </li>
  <li>getDeclaredMethods() Method
    <ul>
      <li>Available in the <code class="language-plaintext highlighter-rouge">Class</code> class.</li>
      <li>Returns an array of <code class="language-plaintext highlighter-rouge">Method</code> objects reflecting all the declared methods of a class.</li>
    </ul>

    <p><strong>Example:</strong></p>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Method</span><span class="o">[]</span> <span class="n">methods</span> <span class="o">=</span> <span class="nc">CustomClass</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredMethods</span><span class="o">();</span>
</code></pre></div>    </div>
  </li>
  <li>Reflection and Annotations
    <ul>
      <li>The <code class="language-plaintext highlighter-rouge">java.lang.reflect</code> package provides classes like <code class="language-plaintext highlighter-rouge">Method</code>, <code class="language-plaintext highlighter-rouge">Field</code>, and <code class="language-plaintext highlighter-rouge">Constructor</code> that allow you to inspect and interact with annotated elements.</li>
    </ul>

    <p><strong>Example (using reflection to get annotations on a method):</strong></p>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Method</span> <span class="n">method</span> <span class="o">=</span> <span class="nc">CustomClass</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">"someMethod"</span><span class="o">);</span>
<span class="nc">MyAnnotation</span> <span class="n">annotation</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="nc">CustomAnnotation</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</code></pre></div>    </div>
  </li>
  <li>@Inherited Meta-Annotation
    <ul>
      <li>Indicates that an annotation type should be inherited by subclasses of annotated classes.</li>
    </ul>

    <p><strong>Example:</strong></p>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Inherited</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">InheritedAnnotation</span> <span class="o">{</span>
    <span class="c1">// Annotation elements, if any</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ol>

<p>The end!</p>

<h3 id="references">References</h3>
<ol>
  <li><a href="https://www.youtube.com/watch?v=DkZr7_c9ry8">Coding with John</a></li>
  <li><a href="https://docs.oracle.com/javase/tutorial/java/annotations/index.html">Java docs</a></li>
</ol>]]></content><author><name>Keshav Bansal</name><email>keshavbansal015@gmail.com</email></author><category term="Java" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Host a Static Website on AWS</title><link href="http://localhost:4000/static-website-aws" rel="alternate" type="text/html" title="Host a Static Website on AWS" /><published>2023-12-18T00:00:00-06:00</published><updated>2023-12-18T00:00:00-06:00</updated><id>http://localhost:4000/static-website-aws</id><content type="html" xml:base="http://localhost:4000/static-website-aws"><![CDATA[<p><img src="/assets/Jan 2023/static-website/Happy programmer.gif" alt="Happy Programmer" class="blog-gif-top" /></p>

<h2 id="introduction">Introduction</h2>

<p>Last semester (Fall 2023), I took a course on cloud computing where I got a lot of exposure to Cloud technologies and some exposure to DevOps.</p>

<p>Of course, I am still nowhere near confident with working with AWS, GCP, Azure, Terraform, etc., so I want to continue practicing working on them.</p>

<p>In this blog post, I want to solve the “Hello World” problem of the cloud. That is to Host a static website on AWS.</p>

<h3 id="what-is-a-static-website">What is a Static Website?</h3>

<ul>
  <li>
    <p>In Simple terms, it’s just a bunch of HTML pages (hopefully with some CSS, maybe some Javascript.)</p>
  </li>
  <li>
    <p>A static website does not have a backend.</p>
  </li>
  <li>
    <p>It also does not have any databases.</p>
  </li>
  <li>
    <p>It is simply a bunch of HTML pages hosted on the internet.</p>
  </li>
  <li>
    <p>As opposed to a static website, a dynamic website would have a backend and &gt;=0 databases.</p>
  </li>
</ul>

<h3 id="why-choose-aws-for-hosting">Why Choose AWS for Hosting?</h3>

<ul>
  <li>No particular reason, we could very well choose any other cloud provider for this.</li>
</ul>

<h3 id="prerequisites">Prerequisites</h3>

<ul>
  <li>
    <p>AWS account.</p>
  </li>
  <li>
    <p>Basic knowledge of HTML/CSS.</p>
  </li>
</ul>

<h3 id="step-1-creating-an-s3-bucket-in-aws">Step 1: Creating an S3 Bucket in AWS</h3>

<ul>
  <li>
    <p>We could use other AWS services also to host the website (eg EC2 instance), but using an S3 bucket is the most common, cost-effective, simple way.</p>
  </li>
  <li>
    <p>Search for S3 service, and click on Create Bucket.</p>
  </li>
  <li>
    <p>Give a name to your bucket, like <strong>“static-website”</strong> (it has to be globally unique)</p>
  </li>
  <li>
    <p>Enable ACLs: helps with writing Access Control Policies for each object in our bucket.</p>
  </li>
  <li>
    <p>Uncheck “Block all public access”, this would let us apply those ACLs and get our website public.</p>
  </li>
  <li>
    <p>Leave everything else as it is and click “Create Bucket”.</p>
  </li>
</ul>

<p><strong>At this point, we have a place to upload our static website files in AWS and permissions to write ACLs for our objects (files) in the S3 bucket.</strong></p>

<h3 id="step-2-uploading-files-to-s3">Step 2: Uploading Files to S3</h3>

<ul>
  <li>
    <p>Now, select the bucket just created.</p>
  </li>
  <li>
    <p>And upload the files with all the default settings.</p>
  </li>
  <li>
    <p>Check if all the files are indeed uploaded, then select them all, clock on “Actions”, scroll down, and click on “Make public with ACLs”.</p>
  </li>
  <li>
    <p>This makes our files publicly accessible.</p>
  </li>
</ul>

<h3 id="checking-public-access">Checking Public Access</h3>

<ul>
  <li>
    <p>Go to the view where all the files you uploaded are listed.</p>
  </li>
  <li>
    <p>Click on any one of the files.</p>
  </li>
  <li>
    <p>Click on object URL: We should be able to view the file.</p>

    <p><strong>You now have your Static website hosted on the internet.</strong> <em>But wait!!!</em></p>
  </li>
</ul>

<h3 id="setup-route-53-for-custom-url-optional">Setup Route 53 for custom URL (Optional)</h3>

<p><strong>To complete this section, our bucket name must match our Custom URL name.</strong></p>

<p>Now, we are gonna get a custom URL to host our website.</p>

<ul>
  <li>
    <p>Go to Route 53 service, and select “Get Started”.</p>
  </li>
  <li>
    <p>Now, assuming we don’t have a custom URL, click on “Register a domain” (Selected by default).</p>
  </li>
  <li>
    <p>Search for the custom URL of your choice, buy it, and wait for it to get registered.</p>
  </li>
</ul>

<h3 id="step-4-connect-custom-url-to-s3-bucket-resource">Step 4: Connect custom URL to S3 bucket resource</h3>

<ul>
  <li>
    <p>Now we need to go back to the S3 bucket, click on properties, scroll down to Static Web Hosting, and click on Edit.</p>
  </li>
  <li>
    <p>Select “Enable”, and use the following configurations:</p>

    <ul>
      <li>
        <p>Static website hosting: Enable</p>
      </li>
      <li>
        <p>Hosting type: Host a static website</p>
      </li>
      <li>
        <p>Index document: index.html (or whatever you want)</p>
      </li>
      <li>
        <p>Error document: error.html (or leave it if you want)</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Click on “Save Changes”.</p>
  </li>
  <li>
    <p>Now go back to the properties view, and copy the URL from the end of the page. It should look like this: http://&lt;\bucketname&gt;.&lt;\bucketzone&gt;.amazonaws.com</p>
  </li>
  <li>
    <p>Now back to Route 53. Click on Hosted Zones from the sidebar.</p>
  </li>
  <li>
    <p>Select the Custom URL, and click on “Create Record”.</p>
  </li>
  <li>
    <p>Flip the Alias switch, enter “Alias to S3 website endpoint” and then choose the zone where your bucket is hosted, eg: US East (N. Virginia) us-east-1, and select your S3 bucket.</p>
  </li>
  <li>
    <p>Save the changes. Wait for the changes to propagate.</p>
  </li>
</ul>

<p><strong>Our website is now hosted with a custom URL :)</strong></p>

<h3 id="step-5-enable-https-with-aws-certificate-manager-optional">Step 5: Enable HTTPS with AWS Certificate Manager (Optional)</h3>

<ul>
  <li>
    <p>Lookup CloudFront from AWS services.</p>
  </li>
  <li>
    <p>Create a new distribution.</p>
  </li>
  <li>
    <p>Choose your S3 bucket and click on “use website endpoint” hosting.</p>
  </li>
  <li>
    <p>Under “Default Cache Behavior”</p>

    <ul>
      <li>
        <p>Change “Viewer protocol policy”: Redirect HTTP to HTTPS</p>
      </li>
      <li>
        <p>Add CNAME, in this case, the necessary one would be &lt;\Custom Domain Name&gt;</p>
      </li>
      <li>
        <p>Optional: We can add more CNAMEs.</p>
      </li>
      <li>
        <p>Under settings: Click on “Request certificate”</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Now, in the AWS Certificate Manager, click on “Next”.</p>
  </li>
  <li>
    <p>Enter your custom domain name, and click Next.</p>
  </li>
  <li>
    <p>Now in the ACM dashboard, we should see a new certificate being created, click on it, and open its detailed view.</p>
  </li>
  <li>
    <p>In the Domains section, click “Create records in Route 53”.</p>
  </li>
  <li>
    <p>Click “Create Records”.</p>
  </li>
  <li>
    <p>Now back in the CloudFront section, refresh the custom certificate list and select the newly created certificate.</p>
  </li>
  <li>
    <p>Enable security, and click on “Create Distribution”.</p>
  </li>
</ul>

<h3 id="step-6-add-ssl-certification">Step 6: Add SSL certification</h3>

<ul>
  <li>
    <p>From the CloudFront dashboard, copy the “domain name” of the distribution.</p>
  </li>
  <li>
    <p>We go back to Route 53 and edit the “Value/Route traffic to” of the “A” record to the copied value.</p>
  </li>
  <li>
    <p>That’s it folks, we are done. :)</p>
  </li>
  <li>
    <p>Let the changes propagate, and now you have a personal secure static website hosted on AWS.</p>
  </li>
</ul>

<h3 id="references">References</h3>
<ol>
  <li><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/HostingWebsiteOnS3Setup.html">Configuring a static website on Amazon S3</a></li>
  <li><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/website-hosting-custom-domain-walkthrough.html">Configuring a static website using a custom domain registered with Route 53</a></li>
</ol>]]></content><author><name>Keshav Bansal</name><email>keshavbansal015@gmail.com</email></author><category term="Cloud_Computing" /><category term="AWS" /><summary type="html"><![CDATA[]]></summary></entry></feed>