<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-01-03T17:53:29-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Keshav Bansal</title><subtitle>Welcome to my digital space, where I chronicle my adventures in technology and learning.  My goal is to regularly update this site with engaging blog posts, insightful book and paper reviews, and innovative project developments.  I hope that visitors to my website leave with a smile, having gained new knowledge and feeling inspired to explore and create.  Join me on this exciting journey of continuous growth and discovery!
</subtitle><author><name>Keshav Bansal</name><email>keshavbansal015@gmail.com</email></author><entry><title type="html">Host a Static website on AWS</title><link href="http://localhost:4000/static-website-aws" rel="alternate" type="text/html" title="Host a Static website on AWS" /><published>2023-12-18T00:00:00-06:00</published><updated>2023-12-18T00:00:00-06:00</updated><id>http://localhost:4000/static-website-aws</id><content type="html" xml:base="http://localhost:4000/static-website-aws"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Last semester(Fall 2023), I took cloud computing where I got a lot of exposure to Cloud technologies 
and some exposure to DevOps technologies.</p>

<p>I am still not remotely confident in going around all these websites and all these tools, so I 
want to continue practicing working on them.</p>

<p>In this blog post, I want to solve the “Hello World” problem of the cloud. That is Host a static website on AWS.</p>

<h3 id="what-is-a-static-website">What is a Static Website?</h3>
<ul>
  <li>In Simple terms, its just a bunch of HTML pages (hopefully with some CSS, maybe some Javascript.)</li>
  <li>A static website does not have a backend system</li>
  <li>It also does not have any databases.</li>
  <li>It is simply a bunch of HTML pages hosted on the internet, like a simple blog.</li>
  <li>As opposed to a static website, a dynamic website would have a backend and atleast 1 database system.</li>
</ul>

<h3 id="why-choose-aws-for-hosting">Why Choose AWS for Hosting?</h3>
<ul>
  <li>No particular reason, you could very well choose any other cloud provider for this.</li>
</ul>

<h3 id="prerequisites">Prerequisites</h3>
<ul>
  <li>AWS account.</li>
  <li>Basic knowledge of HTML/CSS.</li>
</ul>

<h3 id="step-1-creating-a-bucket-in-aws-s3">Step 1: Creating a Bucket in AWS S3</h3>
<ul>
  <li>I could use other AWS services also to host the website, but using an S3 bucket is the most common, cost effective, simple way.</li>
  <li>Search for S3 service, and click on Create Bucket.</li>
  <li>Give a name to your bucket, like <strong>“static-website”</strong> (it has to be globally unique)</li>
  <li>Enable ACLs: helps with writing access control policies for each object in our bucket.</li>
  <li>Uncheck “Block all public access”, this would let us apply those ACLs.</li>
  <li>Leave everything as it is and click “Create Bucket”.</li>
  <li><strong>At this point, we have a place to upload our static website files in AWS and permissions to write ACLs for our objects in the S3 bucket.</strong></li>
</ul>

<h3 id="step-2-uploading-files-to-s3">Step 2: Uploading Files to S3</h3>
<ul>
  <li>Now, select the bucket just created.</li>
  <li>And upload the files with all the default settings.</li>
  <li><strong>At this point, we have our files in the bucket, now we host it and make it public</strong></li>
  <li>Check if all the files are indeed uploaded, then select them all, clock on “Actions”, scroll down and click on “Make public with ACLs”.</li>
  <li>And that’s it.</li>
</ul>

<h3 id="checking-public-access">Checking Public Access</h3>
<ul>
  <li>Go to the view where all the files you uploaded are listed.</li>
  <li>click on any one of the files.</li>
  <li>Click on object URL: We should be able to view the file.</li>
</ul>

<h3 id="setup-route-53-for-custom-url-optional">Setup Route 53 for custom URL (Optional)</h3>
<ul>
  <li>Go to Route 53 service, select “Get Started”.</li>
  <li>__ To complete this section, our bucket name must match with our Custom URL name.__</li>
  <li>Now, assuming we don’t have a custom URL, click on “Register a domain” (Selected by default).</li>
  <li>Search for your custom URL, buy it, and wait for it to get registered.</li>
</ul>

<h3 id="step-4-connect-custom-url-to-s3-bucket-resourse">Step 4: Connect custom URL to S3 bucket resourse</h3>
<ul>
  <li>Now we need to go back to the S3 bucket, click on properties, scroll down to Static Web Hosting and click on Edit.</li>
  <li>Select “Enable”, and use the following configurations:
    <ul>
      <li>Static website hosting: Enable</li>
      <li>Hosting type: Host a static website</li>
      <li>Index document: index.html (or whatever you want)</li>
      <li>Error document: error.html (or leave it if you want)</li>
    </ul>
  </li>
  <li>Click on “Save Changes”.</li>
  <li>Now go back to the properties view, and copy the URL from the end of the page. It should look like this: http://<bucketname>.<bucketzone>.amazonaws.com</bucketzone></bucketname></li>
  <li>Now back to the Route 53. Click on Hosted Zones from the side bar.</li>
  <li>Select the Custom URL, and click on “Create Record”.</li>
  <li>Flip the Alias switch, enter “Alias to S3 website endpoint” and then choose the zone where your bucket is hosted, eg: US East (N. Virginia) us-east-1.</li>
  <li>Save the changes.</li>
</ul>

<h3 id="enable-https-with-aws-certificate-manager-optional">Enable HTTPS with AWS Certificate Manager (Optional)</h3>
<ul>
  <li>
    <p>Lookup Cloud Front from AWS services.</p>
  </li>
  <li>Now, click on your custom URL,</li>
  <li>Using AWS Route 53 for domain registration and DNS management.</li>
  <li>Linking your custom domain to the S3 bucket.</li>
</ul>

<h3 id="step-5-enabling-https-with-aws-certificate-manager-optional">Step 5: Enabling HTTPS with AWS Certificate Manager (Optional)</h3>
<ul>
  <li>Steps to secure your website with SSL/TLS using AWS Certificate Manager and CloudFront.</li>
</ul>

<h3 id="step-6-monitoring-and-managing-your-website">Step 6: Monitoring and Managing Your Website</h3>
<ul>
  <li>Introduction to tools like AWS CloudWatch for monitoring website traffic and performance.</li>
</ul>

<h3 id="best-practices-for-hosting-static-websites-on-aws">Best Practices for Hosting Static Websites on AWS</h3>
<ul>
  <li>Tips for optimizing performance and security.</li>
</ul>

<h3 id="conclusion">Conclusion</h3>
<p>Summarize the key points and encourage readers to experiment with AWS for their static websites.</p>

<h3 id="further-resources">Further Resources</h3>
<ul>
  <li>Links to AWS documentation and other helpful resources.</li>
</ul>]]></content><author><name>Keshav Bansal</name><email>keshavbansal015@gmail.com</email></author><category term="Cloud_Computing" /><category term="AWS" /><summary type="html"><![CDATA[Introduction Last semester(Fall 2023), I took cloud computing where I got a lot of exposure to Cloud technologies and some exposure to DevOps technologies.]]></summary></entry></feed>